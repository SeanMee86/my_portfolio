{"version":3,"sources":["Fonts/bignoodletitling/big_noodle_titling_oblique.ttf","Characters/Characters.js","Info/Info.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","characters","props","style","actionToTake","width","margin","onClick","loadSingleChar","hero","loadAllChars","className","src","content","alt","info","name","affiliation","description","age","base_of_operations","data","abilities","map","ability","ind","key","is_ultimate","header","App","state","characterCache","isClickable","getCharacters","a","length","axios","get","response","setState","fixCharacterName","characterName","loadCharacter","index","id","url","window","scrollTo","showInfo","click","this","justifyContent","marginLeft","character","replace","toLowerCase","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17ace6cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/big_noodle_titling_oblique.52629e48.ttf\";","import React from 'react';\r\nimport './Characters.scss';\r\n\r\nconst characters = props => {\r\n    const style = {\r\n        width: \"150px\",\r\n        margin: \"10px 25px 10px 15px\"\r\n    };\r\n    return (\r\n        <div style={!props.actionToTake ? style : null} onClick={() => props.actionToTake ? props.loadSingleChar(props.hero) : props.loadAllChars()} className={'character'}>\r\n            <img src={`https://d1u1mce87gyfbn.cloudfront.net/hero/${props.content}/hero-select-portrait.png`} alt=\"\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default characters;","import React from 'react';\r\nimport './Info.scss';\r\n\r\nconst info = (props) => {\r\n    return (\r\n        <div className={'info col-lg-9'}>\r\n            <h1>{props.content.name} - {props.content.affiliation ? props.content.affiliation : 'No Affiliation'}</h1>\r\n            <p>{props.content.description}</p>\r\n            <p><strong>Age: </strong>{props.content.age ? props.content.age : \"N/A\"}</p>\r\n            <p><strong>Base of Operations:</strong> {props.content.base_of_operations ? props.content.base_of_operations : 'N/A'}</p>\r\n            <div className={'abilities'}>\r\n                <h2><u>Abilities</u></h2>\r\n                {(props.content.data.abilities.map((ability, ind) =>{\r\n                    return (\r\n                        <div key={ind}>\r\n                            <div>\r\n                                <h3>{ability.name}{ability.is_ultimate ? ` - Ultimate Ability` : null}</h3>\r\n                                <p>{ability.description}</p>\r\n                            </div>\r\n                            <hr/>\r\n                        </div>\r\n                    )\r\n                }))}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default info;","import React from 'react';\r\nimport './Header.scss';\r\n\r\nconst header = (props) => {\r\n  const style = {\r\n    width: \"100%\"\r\n  };\r\n    return (\r\n        <div className={'container'}>\r\n            <div className={'row'}>\r\n                <img style={style} src=\"./4683761209687671824_1.png\" alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default header;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Characters from './Characters/Characters';\r\nimport Info from './Info/Info';\r\nimport Header from './Header/Header';\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        characters: [],\r\n        characterCache: [],\r\n        isClickable: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCharacters();\r\n    }\r\n\r\n    getCharacters = async () => {\r\n        if(this.state.characterCache.length === 0) {\r\n            let response = await axios.get('https://overwatch-api.net/api/v1/hero');\r\n            let {data} = response.data;\r\n            this.setState({\r\n                characters: data,\r\n                characterCache: data,\r\n            });\r\n        }else{\r\n            let data = this.state.characterCache;\r\n            this.setState({\r\n                characters: data,\r\n                isClickable: true\r\n            })\r\n        }\r\n    };\r\n\r\n    fixCharacterName = (characterName) => {\r\n        switch(characterName){\r\n            case 'lcio':\r\n                return 'lucio';\r\n            case 'torbjrn':\r\n                return 'torbjorn';\r\n            case 'soldier76':\r\n                return 'soldier-76';\r\n            default:\r\n                return characterName;\r\n        }\r\n    };\r\n\r\n    loadCharacter = async index => {\r\n        const id = index-1;\r\n        if(!this.state.characterCache[id].data) {\r\n            let response = await axios.get(this.state.characters[id].url);\r\n            let characterCache = [...this.state.characterCache];\r\n            characterCache[id].data = response.data;\r\n            this.setState({characterCache});\r\n        }\r\n        this.setState({\r\n            characters: [this.state.characters[id]],\r\n            isClickable: false\r\n        });\r\n        window.scrollTo(0,0);\r\n    };\r\n\r\n    showInfo = () => this.state.characters.length === 1 ? (\r\n      <Info\r\n        click={this.getCharacters}\r\n        content={this.state.characters[0]}/>\r\n    ) : null;\r\n\r\n    render() {\r\n        const style = {\r\n            justifyContent: this.state.characters.length === 1 ? \"flex-start\" : \"center\"\r\n        };\r\n        return (\r\n            <div className=\"App\">\r\n                <Header/>\r\n                <hr/>\r\n                {this.state.isClickable ? <div className={'charSelect'}>select your hero...</div> : null}\r\n                <div style={style} className={'characterContainer'}>\r\n                    {this.state.characters.length === 0 ? (\r\n                        <div style={{marginLeft: \"20px\"}}>Loading...</div>\r\n                    ) : (\r\n                        this.state.characters.map((character, ind) => {\r\n                            return <Characters\r\n                                actionToTake={this.state.isClickable}\r\n                                loadSingleChar={this.loadCharacter}\r\n                                loadAllChars={this.getCharacters}\r\n                                hero={character.id}\r\n                                key={ind}\r\n                                content={this.fixCharacterName(character.name.replace(/[^\\w-]/g, '').toLowerCase())}/>\r\n                        })\r\n                    )}\r\n                </div>\r\n                {this.showInfo()}\r\n                {!this.state.isClickable ? <button style={{marginLeft: \"14px\"}} onClick={() => this.getCharacters()} className=\"btn btn-outline-primary\">Return to Character Select</button> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './Fonts/bignoodletitling/big_noodle_titling_oblique.ttf';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}